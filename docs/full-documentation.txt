Документация проекта: Telegram Weather Bot



1. Обзор проекта
Telegram Weather Bot — это бот для получения информации о погоде,
разработанный на Python с использованием модульной архитектуры.

Модульная архитектура позволяет организовать код в логические блоки, что делает проект более:
    Поддерживаемым — легко находить и исправлять ошибки
    Расширяемым — просто добавлять новый функционал
    Тестируемым — можно проверять отдельные компоненты
    Читаемым — понятная структура для других разработчиков

Бот предоставляет актуальные данные о погоде в различных городах мира
(где доступны данные используемого погодного сервиса) с возможностью просмотра
различных метеорологических параметров.
Основные возможности:
•	Получение текущей погоды с детализацией по параметрам
•	Прогноз погоды на сегодня
•	Прогноз погоды на завтра
•	Детальная информация о температуре, облачности, ветре, давлении
•	Интуитивный интерфейс с кнопками для навигации
•	Обработка ошибок и валидация ввода
Целевая аудитория:
•	Пользователи Telegram, желающие быстро получить информацию о погоде
•	Студенты, изучающие Python и разработку ботов
 


2. Установка и настройка для разработчиков

2.1. Требования
Системные требования:
•	Python 3.8 или новее
•	Доступ к интернету для:
•	Получения сообщений от пользователей через Telegram
•	Отправки запросов к погодному API для получения актуальных данных о погоде
•	Отправки ответов пользователям
Без интернета бот не сможет работать с внешними сервисами.
•	Аккаунт Telegram для использования бота
API ключи:
•	Telegram Bot Token (получается у @BotFather)
•	API ключ от погодного сервиса (например, WeatherAPI.com)

2.2. Пошаговая установка

1. Клонирование репозитория

```bash
git clone https://github.com/QuietHellsPage/Telegram-bot-technical-task.git
```

```bash
cd Telegram-bot-technical-task
```

2. Создание виртуального окружения
Виртуальное окружение гарантирует, что все зависимости проекта будут работать корректно.
После создания виртуального окружения вы можете переходить к следующему шагу.

3. Установка зависимостей

```bash
pip install -r requirements.txt
```

Основные технологии:
•	Python 3.8+ - основной язык программирования
•	python-telegram-bot==22.5 - фреймворк для работы с Telegram Bot API
•	python-dotenv==1.1.1 - загрузка переменных окружения из .env файла
Вспомогательные библиотеки:
•	requests==2.32.5 - выполнение HTTP-запросов к погодному API
Инструменты разработки:
•	black==25.9.0 - форматирование кода
•	isort==6.1.0 - сортировка импортов



4. Настройка переменных окружения
Создайте файл .env в корне проекта. Файл .env хранит конфиденциальные данные (токены и API-ключи). Он нужен потому что:
Безопасность - токены подобны паролям
Приватность - файл исключен из репозитория через .gitignore
Индивидуальность - каждый разработчик использует свои ключи
env
BOT_TOKEN=your_telegram_bot_token_here
WEATHER_API_KEY=your_weather_api_key_here
5. Запуск бота
bash
python bot.py
2.3. Переменные окружения
•	BOT_TOKEN - обязательный, токен бота от @BotFather
•	WEATHER_API_KEY - обязательный, ключ API погодного сервиса
3. Архитектура проекта
Структура проекта
text
Telegram-bot-technical-task/
├── config/                           # Конфигурация приложения
│   ├── __init__.py                   # Инициализация пакета config
│   └── settings.py                   # Настройки и конфигурация бота
├── handlers/                         # Обработчики сообщений и команд
│   ├── __init__.py                   # Инициализация обработчиков
│   ├── common.py                     # Общие команды (/help)
│   ├── start.py                      # Команда /start
│   └── weather.py                    # Обработка погодных запросов
├── services/                         # Бизнес-логика и внешние API
│   ├── __init__.py                   # Инициализация пакета services
│   └── weather_api.py                # Сервис работы с погодным API
├── .gitignore                        # Файлы для исключения из git
├── bot.py                            # Основной файл запуска бота
├── requirements.txt                  # Зависимости проекта
└── README.md                         # Документация проекта

Пояснение к структуре:
config/ - содержит все настройки приложения: токены для Telegram Bot API, ключи для погодного сервиса, параметры подключения к базам данных (если будут добавлены)
handlers/ - отвечает за взаимодействие с пользователем: принимает команды, обрабатывает сообщения, формирует ответы
services/ - содержит бизнес-логику и работу с внешними сервисами: запросы к API погоды, обработка полученных данных, преобразование в удобный формат
4. Функционал бота
4.1. Доступные команды
/start - Начало работы
•	Очищает данные предыдущей сессии пользователя
•	После команды программа ожидает ввода города
•	Отправляет приветственное сообщение с инструкциями
/help - Справка
•	Предоставляет полную справку по использованию бота
•	Описывает доступные команды и функционал
•	Содержит примеры использования и советы
4.2. Порядок использования бота
Основной сценарий использования:
1.	Начало работы → Пользователь отправляет /start
2.	Ввод города → Пользователь вводит название города
3.	Выбор периода → Бот отображает кнопки выбора периода:
o	 Сейчас (текущая погода)
o	 Сегодня (прогноз на сегодня)
o	 Прогноз на два следующих дня
4.	Детализация (для текущей погоды) → Отображаются кнопки параметров:
o	 Температура
o	 Облачность
o	 Ветер
o	 Давление
o	 Вся информация
o	 Назад к периодам

4.3. Как работают кнопки и их внутренние команды
Что такое callback данные?
Это скрытые команды, которые передаются боту когда вы нажимаете на кнопки. Представьте, что каждая кнопка имеет свой "секретный код", который понимает только бот
Коды для выбора периода прогноза
Когда вы выбираете временной промежуток, кнопки отправляют боту такие команды:
time_current→ "Показать погоду прямо сейчас"
time_today→ "Показать прогноз на весь сегодняшний день"
time_tomorrow → "Показать прогноз на завтра и послезавтра"
Коды для детальной информации
После выбора периода появляются кнопки с параметрами:
•	description - описание погоды
•	temp - температура
•	clouds - облачность
•	wind - ветер
•	pressure - давление
•	all - вся информация
Навигационные команды
back_to_time → "Вернуться к выбору периода (Сейчас/Сегодня/Завтра)"
5. Обработка ошибок
Типы обрабатываемых ошибок
Ошибки валидации:
•	Неверный формат ввода города
•	Отсутствие обязательных переменных окружения
•	Неверный формат API токенов
Ошибки API:
•	Ошибки сети и таймауты
•	Неверные ответы от погодного сервиса
•	Ограничения API (лимиты запросов)
Ошибки времени выполнения:
•	Исключения в обработчиках
•	Проблемы с сериализацией данных
•	Ошибки логирования
6. Расширение функционала
 Добавление новых команд
Чтобы добавить в бота новую команду (например, /stats или /settings), выполните следующие шаги:
1. Создайте новый файл в папке handlers/
Создайте файл с понятным названием, например: stats.py или settings.py
Название файла должно отражать суть команды
2. Напишите функцию-обработчик в этом файле
Функция должна принимать два параметра: update и context
Используйте CommandHandler чтобы связать текстовую команду с вашей функцией
Функция должна возвращать понятный ответ пользователю
3. Зарегистрируйте обработчик в системе
Импортируйте ваш обработчик в файл handlers/__init__.py
Добавьте обработчик в приложение в основном файле bot.py
Пример структуры для команды /stats:
text
handlers/
├── stats.py          # Новый файл с обработчиком команды /stats
├── __init__.py       # Добавляем импорт из stats.py
└── ...               # Другие существующие обработчики
bot.py - добавляем регистрацию обработчика в основном файле приложения.
После выполнения этих шагов и перезапуска бота новая команда станет доступна пользователям. Бот будет реагировать на введенную команду и выполнять код, написанный в вашей функции-обработчике.

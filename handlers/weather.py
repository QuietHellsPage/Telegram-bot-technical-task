from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (CallbackQueryHandler, ContextTypes, MessageHandler,
                          filters)

from services.weather_api import WeatherService


async def handle_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.user_data.get("awaiting_city"):
            await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        city = update.message.text.strip()

        if not city:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
            return

        if len(city) > 50:
            await update.message.reply_text(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        await update.message.reply_text("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ...")

        weather_data, error = WeatherService.get_current_weather(city)

        if error:
            await update.message.reply_text(
                f"–û—à–∏–±–∫–∞: {error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."
            )
            context.user_data["awaiting_city"] = False
            return

        context.user_data["current_city"] = city
        context.user_data["current_weather"] = weather_data
        context.user_data["awaiting_city"] = False

        keyboard = [
            [
                InlineKeyboardButton("üìä –°–µ–π—á–∞—Å", callback_data="time_current"),
                InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="time_today"),
            ],
            [
                InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="time_tomorrow"),
                InlineKeyboardButton("üóìÔ∏è 2 –¥–Ω—è", callback_data="time_forecast_2days"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"–ì–æ—Ä–æ–¥: {city}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=reply_markup
        )

    except Exception as e:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


async def handle_weather_button(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    try:
        query = update.callback_query
        await query.answer()

        city = context.user_data.get("current_city")
        if not city:
            await query.edit_message_text(
                "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return

        callback_data = query.data

        if callback_data.startswith("time_"):
            await _handle_time_selection(query, context, callback_data, city)
        elif callback_data in ["description", "temp", "clouds", "wind", "feels_like", "humidity", "pressure", "all"]:
            await _handle_weather_detail(query, context, callback_data)
        elif callback_data == "back_to_time":
            keyboard = [
                [
                    InlineKeyboardButton("üìä –°–µ–π—á–∞—Å", callback_data="time_current"),
                    InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="time_today"),
                ],
                [
                    InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="time_tomorrow"),
                    InlineKeyboardButton("üóìÔ∏è 2 –¥–Ω—è", callback_data="time_forecast_2days"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–ì–æ—Ä–æ–¥: {city}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except Exception as e:
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def _handle_time_selection(query, context, callback_data, city):
    try:
        if callback_data == "time_current":
            weather_data = context.user_data.get("current_weather")
            if not weather_data:
                weather_data, error = WeatherService.get_current_weather(city)
                if error:
                    await query.edit_message_text(f"–û—à–∏–±–∫–∞: {error}")
                    return
                context.user_data["current_weather"] = weather_data

            keyboard = [
                [
                    InlineKeyboardButton("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", callback_data="temp"),
                    InlineKeyboardButton("üå§Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="description"),
                ],
                [
                    InlineKeyboardButton("üí® –í–µ—Ç–µ—Ä", callback_data="wind"),
                    InlineKeyboardButton("‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å", callback_data="clouds"),
                ],
                [
                    InlineKeyboardButton("ü§í –û—â—É—â–∞–µ—Ç—Å—è", callback_data="feels_like"),
                    InlineKeyboardButton("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="humidity"),
                ],
                [
                    InlineKeyboardButton("üìä –î–∞–≤–ª–µ–Ω–∏–µ", callback_data="pressure"),
                    InlineKeyboardButton("üìã –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="all"),
                ],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"–ü–æ–≥–æ–¥–∞ –≤ {city.upper()} —Å–µ–π—á–∞—Å:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=reply_markup,
            )

        elif callback_data == "time_today":
            await query.edit_message_text("–ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
            forecast_data, error = WeatherService.get_weather_forecast(city, days=1)
            if error:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞: {error}")
                return

            text = WeatherService.format_weather_info(
                forecast_data, "today", is_forecast=True
            )
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)

        elif callback_data == "time_tomorrow":
            await query.edit_message_text("–ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞...")
            forecast_data, error = WeatherService.get_weather_forecast(city, days=5)
            if error:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞: {error}")
                return

            text = WeatherService.format_weather_info(
                forecast_data, "tomorrow", is_forecast=True
            )
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)

        elif callback_data == "time_forecast_2days":
            await query.edit_message_text("–ü–æ–ª—É—á–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2 –¥–Ω—è...")
            forecast_data, error = WeatherService.get_weather_forecast(city, days=5)
            if error:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞: {error}")
                return

            text = WeatherService.format_weather_info(
                forecast_data, "forecast_2days", is_forecast=True
            )
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)

        elif callback_data == "back_to_time":
            keyboard = [
                [
                    InlineKeyboardButton("üìä –°–µ–π—á–∞—Å", callback_data="time_current"),
                    InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="time_today"),
                ],
                [
                    InlineKeyboardButton("üìÜ –ó–∞–≤—Ç—Ä–∞", callback_data="time_tomorrow"),
                    InlineKeyboardButton("üóìÔ∏è 2 –¥–Ω—è", callback_data="time_forecast_2days"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"–ì–æ—Ä–æ–¥: {city}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=reply_markup
            )

    except Exception as e:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")


async def _handle_weather_detail(query, context, callback_data):
    try:
        weather_data = context.user_data.get("current_weather")
        if not weather_data:
            await query.edit_message_text(
                "–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            return

        text = WeatherService.format_weather_info(weather_data, callback_data)
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="time_current")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)

    except Exception as e:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")


weather_input_handler = MessageHandler(
    filters.TEXT & ~filters.COMMAND, handle_city_input
)
weather_button_handler = CallbackQueryHandler(handle_weather_button)
